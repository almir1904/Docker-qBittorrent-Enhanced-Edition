name: Check and Update ReleaseTag

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      manual_trigger:
        description: 'Manually trigger the workflow'
        default: 'false'
        required: false

jobs:
  update_release_tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v5.3.0
        with:
          python-version: '3.x'

      - name: Get latest release from linked repository
        id: latest_release
        run: |
          release_url="https://api.github.com/repos/c0re100/qBittorrent-Enhanced-Edition/releases/latest"
          latest_release=$(curl -s $release_url | jq -r .tag_name)
          latest_release=${latest_release#release-}  # Remove "release-" prefix
          echo "Latest release from API: $latest_release"
          echo "Latest_Release=$latest_release" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Read current ReleaseTag file
        id: read_release_tag
        run: |
          release_tag=$(cat ReleaseTag)
          echo "Current Release: $release_tag"
          echo "Latest Tag: Latest_Release"
          echo "Release Tag: $release_tag"
          echo "Release_Tag=$release_tag" >> $GITHUB_ENV
        
      - name: Compare releases and update ReleaseTag
        if: ${{ env.Release_Tag }} != ${{ env.Latest_Release }}
        run: |
          echo "Updating ReleaseTag file"
          echo $Latest_Release > ReleaseTag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Commit and push if ReleaseTag was updated
        #if: ${{ env.Release_Tag }} != ${{ env.Latest_Release }}
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add ReleaseTag
          if [[ -n $(git status --porcelain) ]]; then
            git commit -m "Update ReleaseTag to ${{ env.Latest_Release }}"
            git push || true  # This will ensure the workflow exits with success even if there is an error.
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

